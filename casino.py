import random
import telebot
from telebot import types

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = '7891481051:AAHMiTc0AVlDK_1zXCENykyiR1eh0hTh89A'
ADMIN_USERNAME = "@work_with_mvd"  # –í–∞—à —é–∑–µ—Ä–Ω–µ–π–º –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π
CHANNEL_ID = '@MMMillion_casino'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ username –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
ADMIN_ID = 7400244823 # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π ID

bot = telebot.TeleBot(TOKEN)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users = {}

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å—Ç–∞–≤–∫–∏
BET_AMOUNTS = [50, 100, 200, 500, 1000, 5000, 10000]

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    if user_id not in users:
        users[user_id] = {
            'balance': 0,
            'username': message.from_user.username or str(user_id),
            'games_played': 0,
            'total_wins': 0
        }

    markup = main_menu_markup()
    bot.send_message(message.chat.id,
                    f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –∫–∞–∑–∏–Ω–æ!\n"
                    f"üíµ –í–∞—à –±–∞–ª–∞–Ω—Å: {users[user_id]['balance']}$\n"
                    f"üì¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –≤ –∫–∞–Ω–∞–ª–µ: {CHANNEL_ID}",
                    reply_markup=markup)


# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ---
def main_menu_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('üé∞ –°–ª–æ—Ç—ã')
    btn2 = types.KeyboardButton('üéØ –†—É–ª–µ—Ç–∫–∞')
    btn3 = types.KeyboardButton('üé≤ –ö–æ—Å—Ç–∏')
    btn4 = types.KeyboardButton('üí∞ –ë–∞–ª–∞–Ω—Å')
    btn5 = types.KeyboardButton('üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å')
    markup.add(btn1, btn2, btn3, btn4, btn5)
    return markup

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Ö–≤–∞—Ç–∫–∏ —Å—Ä–µ–¥—Å—Ç–≤ ---
def handle_low_balance(message, game_name, min_bet):
    user_id = message.from_user.id
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üíå –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É", url=f"https://t.me/{ADMIN_USERNAME[1:]}"))
    
    bot.send_message(
        message.chat.id,
        f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!\n\n"
        f"–î–ª—è –∏–≥—Ä—ã –≤ {game_name} –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {min_bet}$.\n"
        f"–í–∞—à –±–∞–ª–∞–Ω—Å: {users[user_id]['balance']}\n\n"
        f"üì© –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ",
        reply_markup=markup
    )
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    bot.send_message(
        CHANNEL_ID,
        f"‚ö†Ô∏è @{users[user_id]['username']} –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏!\n"
        f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {users[user_id]['balance']}\n"
        f"–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è {game_name}: {min_bet}"
    )

# --- –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ---
@bot.message_handler(func=lambda msg: msg.text == 'üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å')
def deposit_menu(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üì© –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É", url=f"https://t.me/{ADMIN_USERNAME[1:]}"))
    
    bot.send_message(
        message.chat.id,
        f"üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\n\n"
        f"–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É \n"
        f"–£–∫–∞–∂–∏—Ç–µ –≤–∞—à ID: `{message.from_user.id}`",
        reply_markup=markup,
        parse_mode="Markdown"
    )

def bet_amounts_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    buttons = [types.KeyboardButton(str(amount)) for amount in BET_AMOUNTS]
    buttons.append(types.KeyboardButton('–û—Ç–º–µ–Ω–∞'))
    markup.add(*buttons)
    return markup

# –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥–∞
@bot.message_handler(commands=['admin'], func=lambda message: message.from_user.id == ADMIN_ID)
def admin_panel(message):
    markup = types.InlineKeyboardMarkup()
    for user_id, user_data in users.items():
        markup.add(types.InlineKeyboardButton(user_data['username'], callback_data=f'add_credits_{user_id}'))
    markup.add(types.InlineKeyboardButton("–°–µ–±–µ", callback_data=f'add_credits_{ADMIN_ID}'))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è $:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('add_credits_'))
def add_credits_callback(call):
    user_id = int(call.data.split('_')[2])
    bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {users[user_id]['username']}:")
    bot.register_next_step_handler(call.message, process_credit_addition, user_id)

def process_credit_addition(message, user_id):
    try:
        amount = int(message.text)
        if amount <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")

        users[user_id]['balance'] += amount
        bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {users[user_id]['username']} –∑–∞—á–∏—Å–ª–µ–Ω–æ {amount}$. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {users[user_id]['balance']}")
        bot.send_message(
            user_id,
            f"üí∞ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ø–æ–ª–Ω–∏–ª –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞ {amount}$!\n"
            f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {users[user_id]['balance']}"
        )

    except ValueError as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
@bot.message_handler(func=lambda message: True)
def handle_messages(message):
    user_id = message.from_user.id
    if user_id not in users:
        users[user_id] = {
            'balance': 0,
            'username': message.from_user.username or str(user_id),
            'games_played': 0,
            'total_wins': 0
        }

    if message.text == 'üí∞ –ë–∞–ª–∞–Ω—Å':
        show_balance(message)
    elif message.text == 'üé∞ –°–ª–æ—Ç—ã':
        ask_bet_amount(message, 'slots')
    elif message.text == 'üéØ –†—É–ª–µ—Ç–∫–∞':
        ask_bet_amount(message, 'roulette')
    elif message.text == 'üé≤ –ö–æ—Å—Ç–∏':
        ask_bet_amount(message, 'dice')
    elif message.text == 'üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤':
        show_top_players(message)

def ask_bet_amount(message, game_type):
    user_id = message.from_user.id
    bot.send_message(message.chat.id,
                    f"üíµ –í–∞—à –±–∞–ª–∞–Ω—Å: {users[user_id]['balance']}$\n"
                    f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:",
                    reply_markup=bet_amounts_markup())
    bot.register_next_step_handler(message, process_bet_amount, game_type)

def process_bet_amount(message, game_type):
    user_id = message.from_user.id

    if message.text == '–û—Ç–º–µ–Ω–∞':
        bot.send_message(message.chat.id, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_menu_markup())
        return

    try:
        bet = int(message.text)
        if bet <= 0:
            bot.send_message(message.chat.id, "‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!", reply_markup=main_menu_markup())
            return
        if bet > users[user_id]['balance']:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!", reply_markup=main_menu_markup())
            return
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!", reply_markup=main_menu_markup())
        return

    if game_type == 'slots':
        play_slots(message, bet)
    elif game_type == 'roulette':
        play_roulette(message, bet)
    elif game_type == 'dice':
        start_dice_game(message, bet)

def show_balance(message):
    user_id = message.from_user.id
    stats = (
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {users[user_id]['balance']}$\n"
        f"üéÆ –°—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä: {users[user_id]['games_played']}\n"
        f"üèÜ –ü–æ–±–µ–¥: {users[user_id]['total_wins']}\n"
        f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {users[user_id]['total_wins']/users[user_id]['games_played']*100 if users[user_id]['games_played'] > 0 else 0:.1f}%"
    )
    bot.send_message(message.chat.id, stats)

def show_top_players(message):
    sorted_users = sorted(users.items(), key=lambda x: x[1]['balance'], reverse=True)[:10]
    top_list = "üèÜ –¢–û–ü-10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É:\n\n"
    for i, (user_id, data) in enumerate(sorted_users, 1):
        top_list += f"{i}. @{data['username']} - {data['balance']}$\n"
    bot.send_message(message.chat.id, top_list)

def post_to_channel(text):
    try:
        bot.send_message(CHANNEL_ID, text)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –∫–∞–Ω–∞–ª: {e}")

def update_stats(user_id, is_win):
    users[user_id]['games_played'] += 1
    if is_win:
        users[user_id]['total_wins'] += 1

# ===== –ò–ì–†–ê –í –°–õ–û–¢–´ =====
def play_slots(message, bet):
    user_id = message.from_user.id
    username = users[user_id]['username']

    users[user_id]['balance'] -= bet

    symbols = ['üçí', 'üçã', 'üçä', 'üçá', 'üîî', '7Ô∏è‚É£']
    result = [random.choice(symbols) for _ in range(3)]

    if result[0] == result[1] == result[2]:
        win = bet * 3  # –î–∂–µ–∫–ø–æ—Ç x10
    elif result[0] == result[1] or result[1] == result[2]:
        win = bet * 1.1  # x3 –∑–∞ 2 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö
    else:
        win = 0

    users[user_id]['balance'] += win
    is_win = win > 0
    update_stats(user_id, is_win)

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user_message = (
        f"üé∞ –†–µ–∑—É–ª—å—Ç–∞—Ç: {' '.join(result)} üé∞\n"
        f"–°—Ç–∞–≤–∫–∞: {bet}$\n"
        f"–í—ã {'–≤—ã–∏–≥—Ä–∞–ª–∏' if is_win else '–ø—Ä–æ–∏–≥—Ä–∞–ª–∏'} {win if is_win else bet}$!\n"
        f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {users[user_id]['balance']}"
    )
    bot.send_message(message.chat.id, user_message, reply_markup=main_menu_markup())

    # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
    channel_message = (
        f"üé∞ –ò–≥—Ä–æ–∫ @{username} —Å—ã–≥—Ä–∞–ª –≤ —Å–ª–æ—Ç—ã:\n"
        f"–°—Ç–∞–≤–∫–∞: {bet}$\n"
        f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {' '.join(result)}\n"
        f"–°—Ç–∞—Ç—É—Å: {'üü¢ –í–´–ò–ì–†–´–®' if is_win else 'üî¥ –ü–†–û–ò–ì–†–´–®'}\n"
        f"–°—É–º–º–∞: {'+' + str(win) if is_win else '-' + str(bet)}$\n"
        f"#—Å–ª–æ—Ç—ã #–∫–∞–∑–∏–Ω–æ"
    )
    post_to_channel(channel_message)

# ===== –†–£–õ–ï–¢–ö–ê =====
def play_roulette(message, bet):
    user_id = message.from_user.id
    username = users[user_id]['username']

    markup = types.InlineKeyboardMarkup(row_width=3)
    btn_red = types.InlineKeyboardButton('üî¥ –ö—Ä–∞—Å–Ω–æ–µ (x2)', callback_data=f'roulette_red_{bet}')
    btn_black = types.InlineKeyboardButton('‚ö´ –ß—ë—Ä–Ω–æ–µ (x2)', callback_data=f'roulette_black_{bet}')
    btn_green = types.InlineKeyboardButton('üü¢ –ó–µ–ª—ë–Ω–æ–µ (x14)', callback_data=f'roulette_green_{bet}')
    markup.add(btn_red, btn_black, btn_green)

    bot.send_message(message.chat.id, f"üéØ –°—Ç–∞–≤–∫–∞: {bet}$\n–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('roulette_'))
def handle_roulette_bet(call):
    user_id = call.from_user.id
    username = users[user_id]['username']
    _, color, bet = call.data.split('_')
    bet = int(bet)

    users[user_id]['balance'] -= bet

    result = random.randint(0, 36)
    if result == 0:
        actual_color = 'green'
    elif 1 <= result <= 10 or 19 <= result <= 28:
        actual_color = 'red' if result % 2 == 1 else 'black'
    else:
        actual_color = 'black' if result % 2 == 1 else 'red'

    if color == actual_color:
        if color == 'green':
            win = bet * 5  # x14 –∑–∞ –∑–µ–ª—ë–Ω–æ–µ
        else:
            win = bet * 1.3   # x2 –∑–∞ –∫—Ä–∞—Å–Ω–æ–µ/—á—ë—Ä–Ω–æ–µ
    else:
        win = 0

    users[user_id]['balance'] += win
    is_win = win > 0
    update_stats(user_id, is_win)

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user_message = (
        f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä—É–ª–µ—Ç–∫–∏: {result} ({'üî¥' if actual_color == 'red' else '‚ö´' if actual_color == 'black' else 'üü¢'})\n"
        f"–°—Ç–∞–≤–∫–∞: {bet}$ –Ω–∞ {color}\n"
        f"–í—ã {'–≤—ã–∏–≥—Ä–∞–ª–∏' if is_win else '–ø—Ä–æ–∏–≥—Ä–∞–ª–∏'} {win if is_win else bet}$!\n"
        f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {users[user_id]['balance']}"
    )
    bot.send_message(call.message.chat.id, user_message, reply_markup=main_menu_markup())

    # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
    color_name = {'red': '–∫—Ä–∞—Å–Ω–æ–µ', 'black': '—á—ë—Ä–Ω–æ–µ', 'green': '–∑–µ–ª—ë–Ω–æ–µ'}[color]
    channel_message = (
        f"üéØ –ò–≥—Ä–æ–∫ @{username} —Å—ã–≥—Ä–∞–ª –≤ —Ä—É–ª–µ—Ç–∫—É:\n"
        f"–°—Ç–∞–≤–∫–∞: {bet}$ –Ω–∞ {color_name} ({'x14' if color == 'green' else 'x2'})\n"
        f"–í—ã–ø–∞–ª–æ: {result} ({'üî¥' if actual_color == 'red' else '‚ö´' if actual_color == 'black' else 'üü¢'})\n"
        f"–°—Ç–∞—Ç—É—Å: {'üü¢ –í–´–ò–ì–†–´–®' if is_win else 'üî¥ –ü–†–û–ò–ì–†–´–®'}\n"
        f"–°—É–º–º–∞: {'+' + str(win) if is_win else '-' + str(bet)}$\n"
        f"#—Ä—É–ª–µ—Ç–∫–∞ #–∫–∞–∑–∏–Ω–æ"
    )
    post_to_channel(channel_message)

    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)

# ===== –ò–ì–†–ê –í –ö–û–°–¢–ò =====
def start_dice_game(message, bet):
    user_id = message.from_user.id
    username = users[user_id]['username']

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('–ë–æ–ª—å—à–µ')
    btn2 = types.KeyboardButton('–ú–µ–Ω—å—à–µ')
    btn3 = types.KeyboardButton('–†–∞–≤–Ω–æ')
    btn4 = types.KeyboardButton('–û—Ç–º–µ–Ω–∞')
    markup.add(btn1, btn2, btn3, btn4)

    bot.send_message(message.chat.id,
                    f"üé≤ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {bet}$\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑:\n"
                    f"‚Ä¢ –ë–æ–ª—å—à–µ - —Å—É–º–º–∞ –∫–æ—Å—Ç–µ–π >7 (x1.3)\n"
                    f"‚Ä¢ –ú–µ–Ω—å—à–µ - —Å—É–º–º–∞ –∫–æ—Å—Ç–µ–π <7 (x1.3)\n"
                    f"‚Ä¢ –†–∞–≤–Ω–æ - —Å—É–º–º–∞ –∫–æ—Å—Ç–µ–π =7 (x2)",
                    reply_markup=markup)

    users[user_id]['current_bet'] = bet
    bot.register_next_step_handler(message, process_dice_choice)

def process_dice_choice(message):
    user_id = message.from_user.id
    username = users[user_id]['username']

    if message.text == '–û—Ç–º–µ–Ω–∞':
        bot.send_message(message.chat.id, "‚ùå –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=main_menu_markup())
        return

    choice = message.text.lower()
    if choice not in ['–±–æ–ª—å—à–µ', '–º–µ–Ω—å—à–µ', '—Ä–∞–≤–Ω–æ']:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!", reply_markup=main_menu_markup())
        return

    bet = users[user_id]['current_bet']
    users[user_id]['balance'] -= bet

    # –ë—Ä–æ—Å–∞–µ–º –∫–æ—Å—Ç–∏
    dice1 = random.randint(1, 6)
    dice2 = random.randint(1, 6)
    total = dice1 + dice2

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (choice == '–±–æ–ª—å—à–µ' and total > 7) or \
       (choice == '–º–µ–Ω—å—à–µ' and total < 7) or \
       (choice == '—Ä–∞–≤–Ω–æ' and total == 7):

        if choice == '—Ä–∞–≤–Ω–æ':
            multiplier = 2  # x5 –∑–∞ —Ç–æ—á–Ω–æ–µ —É–≥–∞–¥—ã–≤–∞–Ω–∏–µ
        else:
            multiplier = 1.3  # x2 –∑–∞ –±–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ

        win = bet * multiplier
        users[user_id]['balance'] += win
        result_text = f"üé≤ –ü–æ–±–µ–¥–∞! +{win}$"
        is_win = True
    else:
        result_text = f"üé≤ –ü—Ä–æ–∏–≥—Ä—ã—à! -{bet}$"
        is_win = False

    update_stats(user_id, is_win)

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user_message = (
        f"üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞: {dice1} + {dice2} = {total}\n"
        f"–í–∞—à –ø—Ä–æ–≥–Ω–æ–∑: {choice.capitalize()}\n"
        f"–°—Ç–∞–≤–∫–∞: {bet}$\n"
        f"{result_text}\n"
        f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {users[user_id]['balance']}"
    )
    bot.send_message(message.chat.id, user_message, reply_markup=main_menu_markup())

# –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
    channel_message = (
        f"üé≤ –ò–≥—Ä–æ–∫ @{username} —Å—ã–≥—Ä–∞–ª –≤ –∫–æ—Å—Ç–∏:\n"
        f"–°—Ç–∞–≤–∫–∞: {bet}$\n"
        f"–ü—Ä–æ–≥–Ω–æ–∑: {choice.capitalize()} ({'x5' if choice == '—Ä–∞–≤–Ω–æ' else 'x2'})\n"
        f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {dice1} + {dice2} = {total}\n"
        f"–°—Ç–∞—Ç—É—Å: {'üü¢ –í–´–ò–ì–†–´–®' if is_win else 'üî¥ –ü–†–û–ò–ì–†–´–®'}\n"
        f"–°—É–º–º–∞: {'+' + str(win) if is_win else '-' + str(bet)}$\n"
        f"#–∫–æ—Å—Ç–∏ #–∫–∞–∑–∏–Ω–æ"
    )
    post_to_channel(channel_message)

# --- –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ (—Ä—É—á–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ) ---
@bot.message_handler(commands=['add_balance'])
def admin_add_balance(message):
    if not message.from_user.username == ADMIN_USERNAME[1:]:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
        return
    
    try:
        _, user_id, amount = message.text.split()
        amount = int(amount)
        
        if user_id not in users:
            bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
            
        users[user_id]['balance'] += amount
        bot.send_message(
            message.chat.id,
            f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}$\n"
            f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {users[user_id]['balance']}"
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(
            user_id,
            f"üí∞ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ø–æ–ª–Ω–∏–ª –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞ {amount}$!\n"
            f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {users[user_id]['balance']}"
        )
    except:
        bot.send_message(message.chat.id, "‚ùå –§–æ—Ä–º–∞—Ç: /add_balance user_id amount")

if __name__ == '__main__':
    print("–ë–æ—Ç –∫–∞–∑–∏–Ω–æ –∑–∞–ø—É—â–µ–Ω...Misha poshel nahuy")
    bot.polling(none_stop=True)
    print("Misha poshel nahuy")